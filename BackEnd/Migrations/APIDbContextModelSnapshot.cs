// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace passagens_api.Migrations
{
    [DbContext(typeof(APIDbContext))]
    partial class APIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Aeroporto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cidade")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Aeroportos");
                });

            modelBuilder.Entity("Aviao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanhiaAereaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Modelo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanhiaAereaId");

                    b.ToTable("Avioes");
                });

            modelBuilder.Entity("Bagagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassageiroId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Peso")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PassageiroId");

                    b.ToTable("Bagagens");
                });

            modelBuilder.Entity("CompanhiaAerea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pais")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CompanhiasAereas");
                });

            modelBuilder.Entity("Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AeroportoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cargo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AeroportoId");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Pagamentos");
                });

            modelBuilder.Entity("Passageiro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Passageiros");
                });

            modelBuilder.Entity("Passagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Classe")
                        .HasColumnType("TEXT");

                    b.Property<int>("PagamentoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassageiroId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PortaoId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Preco")
                        .HasColumnType("TEXT");

                    b.Property<int>("VooId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PagamentoId");

                    b.HasIndex("PassageiroId");

                    b.HasIndex("PortaoId");

                    b.HasIndex("VooId");

                    b.ToTable("Passagens");
                });

            modelBuilder.Entity("Portao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AeroportoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codigo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AeroportoId");

                    b.ToTable("Portoes");
                });

            modelBuilder.Entity("Voo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AviaoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DestinoAeroportoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Numero")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrigemAeroportoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AviaoId");

                    b.HasIndex("DestinoAeroportoId");

                    b.HasIndex("OrigemAeroportoId");

                    b.ToTable("Voos");
                });

            modelBuilder.Entity("Aviao", b =>
                {
                    b.HasOne("CompanhiaAerea", "CompanhiaAerea")
                        .WithMany()
                        .HasForeignKey("CompanhiaAereaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanhiaAerea");
                });

            modelBuilder.Entity("Bagagem", b =>
                {
                    b.HasOne("Passageiro", "Passageiro")
                        .WithMany()
                        .HasForeignKey("PassageiroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passageiro");
                });

            modelBuilder.Entity("Funcionario", b =>
                {
                    b.HasOne("Aeroporto", "Aeroporto")
                        .WithMany()
                        .HasForeignKey("AeroportoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aeroporto");
                });

            modelBuilder.Entity("Passagem", b =>
                {
                    b.HasOne("Pagamento", "Pagamento")
                        .WithMany()
                        .HasForeignKey("PagamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Passageiro", "Passageiro")
                        .WithMany()
                        .HasForeignKey("PassageiroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portao", "Portao")
                        .WithMany()
                        .HasForeignKey("PortaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voo", "Voo")
                        .WithMany()
                        .HasForeignKey("VooId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pagamento");

                    b.Navigation("Passageiro");

                    b.Navigation("Portao");

                    b.Navigation("Voo");
                });

            modelBuilder.Entity("Portao", b =>
                {
                    b.HasOne("Aeroporto", "Aeroporto")
                        .WithMany()
                        .HasForeignKey("AeroportoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aeroporto");
                });

            modelBuilder.Entity("Voo", b =>
                {
                    b.HasOne("Aviao", "Aviao")
                        .WithMany()
                        .HasForeignKey("AviaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aeroporto", "DestinoAeroporto")
                        .WithMany()
                        .HasForeignKey("DestinoAeroportoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aeroporto", "OrigemAeroporto")
                        .WithMany()
                        .HasForeignKey("OrigemAeroportoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aviao");

                    b.Navigation("DestinoAeroporto");

                    b.Navigation("OrigemAeroporto");
                });
#pragma warning restore 612, 618
        }
    }
}
